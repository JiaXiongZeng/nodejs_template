import { use, useState, useEffect, MouseEvent } from 'react';
import Stack from '@mui/material/Stack';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import { InnerFixedBottomNavContext } from '@components/Customization/InnerFixedBottomNavigation';
import { Search, StyledInputBase, SearchIconWrapper  } from '@components/Customization/SearchInput';
import SearchIcon from '@mui/icons-material/Search';

import { IconButton } from '@mui/material';

import ListItemAvatar from '@mui/material/ListItemAvatar';
import ListItemText from '@mui/material/ListItemText';
import Avatar from '@mui/material/Avatar';

import Menu from '@mui/material/Menu';
import MenuItem from '@mui/material/MenuItem';
import Badge from '@mui/material/Badge';
import MailIcon from '@mui/icons-material/Mail';
import NotificationsIcon from '@mui/icons-material/Notifications';
import AccountCircle from '@mui/icons-material/AccountCircle';


import StarRateIcon from '@mui/icons-material/StarRate';

import 
{ 
  useSecondaryAppBar, 
  SecAppBarMiddleBlock, SecAppBarRightBlock, SecAppBarMobilePopBlock
} from '@components/Customization/SecondaryAppBar';

interface MessageExample {
    primary: string;
    secondary: string;
    person: string;
}
  
const messageExamples: readonly MessageExample[] = [
    {
      primary: 'Brunch this week?',
      secondary: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
      person: '/static/images/avatar/5.jpg',
    },
    {
      primary: 'Birthday Gift',
      secondary: `Do you have a suggestion for a good present for John on his work
        anniversary. I am really confused & would love your thoughts on it.`,
      person: '/static/images/avatar/1.jpg',
    },
    {
      primary: 'Recipe to try',
      secondary: 'I am try out this new BBQ recipe, I think this might be amazing',
      person: '/static/images/avatar/2.jpg',
    },
    {
      primary: 'Yes!',
      secondary: 'I have the tickets to the ReactConf for this year.',
      person: '/static/images/avatar/3.jpg',
    },
    {
      primary: "Doctor's Appointment",
      secondary: 'My appointment for the doctor was rescheduled for next Saturday.',
      person: '/static/images/avatar/4.jpg',
    },
    {
      primary: 'Discussion',
      secondary: `Menus that are generated by the bottom app bar (such as a bottom
        navigation drawer or overflow menu) open as bottom sheets at a higher elevation
        than the bar.`,
      person: '/static/images/avatar/5.jpg',
    },
    {
      primary: 'Summer BBQ',
      secondary: `Who wants to have a cookout this weekend? I just got some furniture
        for my backyard and would love to fire up the grill.`,
      person: '/static/images/avatar/1.jpg',
    },
];

/**
 * Generate a test data set
 * @returns 
 */
const refreshMessages = (): MessageExample[] => {
  const getRandomInt = (max: number) => Math.floor(Math.random() * Math.floor(max));

  return Array.from(new Array(50)).map(
    () => messageExamples[getRandomInt(messageExamples.length)],
  );
}

export const ListPartner = () => {
    //Appbar Block
    const [anchorEl, setAnchorEl] = useState<Nullable<HTMLElement>>(null);
    const isMenuOpen = Boolean(anchorEl);
    const { SecondaryAppBar, SecondaryAppBarContext } = useSecondaryAppBar({
      handleProfileMenuOpen: (event: MouseEvent<HTMLElement>) => {
        setAnchorEl(event.currentTarget);
      },
      handleMenuClose: () => {    
        setAnchorEl(null);
      }
    });
    const appContext = use(SecondaryAppBarContext);

    const renderMenu = (ctxt: typeof appContext) => {
      const closeAll = () => {
        if(ctxt?.handleMobileMenuClose){
          ctxt?.handleMobileMenuClose();
        }        
        ctxt?.handleMenuClose();
      };
      
      return (
        <Menu
          anchorEl={anchorEl}
          anchorOrigin={{
            vertical: 'top',
            horizontal: 'right',
          }}
          keepMounted
          transformOrigin={{
            vertical: 'top',
            horizontal: 'right',
          }}
          open={isMenuOpen}
          onClose={ctxt?.handleMenuClose}
        >
          <MenuItem onClick={closeAll}>Profile</MenuItem>
          <MenuItem onClick={closeAll}>My account</MenuItem>
        </Menu>
      );
    };

    //Content Block
    const context = use(InnerFixedBottomNavContext);
    const [messages, setMessages] = useState(() => refreshMessages());

    useEffect(() => {
        setMessages(refreshMessages());
    }, [context?.value]);
    
    return (
      <>      
        <SecondaryAppBar title="Partner">
          {(ctxt) => (
            <>
              <SecAppBarMiddleBlock>
                <Search>
                  <SearchIconWrapper>
                    <SearchIcon />
                  </SearchIconWrapper>
                  <StyledInputBase placeholder="Searchâ€¦" />
                </Search>
              </SecAppBarMiddleBlock>

              <SecAppBarRightBlock>
                <IconButton size="large" color="inherit">
                  <Badge badgeContent={4} color="error">
                    <MailIcon />
                  </Badge>
                </IconButton>
                <IconButton size="large" color="inherit">
                  <Badge badgeContent={17} color="error">
                    <NotificationsIcon />
                  </Badge>
                </IconButton>
                <IconButton
                  size="large"
                  color="inherit"
                  edge="end"
                  onClick={ctxt.handleProfileMenuOpen}
                >
                  <AccountCircle />
                </IconButton>
              </SecAppBarRightBlock>

              <SecAppBarMobilePopBlock>
                <MenuItem>
                  <IconButton size="large" color="inherit">
                    <Badge badgeContent={4} color="error">
                      <MailIcon />
                    </Badge>
                  </IconButton>
                  <p>Messages</p>
                </MenuItem>
                <MenuItem>
                  <IconButton size="large" color="inherit">
                    <Badge badgeContent={17} color="error">
                      <NotificationsIcon />
                    </Badge>
                  </IconButton>
                  <p>Notifications</p>
                </MenuItem>
                <MenuItem onClick={ctxt.handleProfileMenuOpen}>
                  <IconButton color="inherit" size="large">
                    <AccountCircle />
                  </IconButton>
                  <p>Profile</p>
                </MenuItem>
              </SecAppBarMobilePopBlock>

              {renderMenu(ctxt)}
            </>
          )}
        </SecondaryAppBar>
        <List sx={{ pt: '3.5em' }} dense={true}>
            {messages.map(({ primary, secondary, person }, index) => (
              <ListItem
                key={index + person}
                sx={{ padding: '1ch', minHeight: '4em' }}
              >
                  <ListItemAvatar>
                    <Avatar alt="Profile Picture" src={person} />
                  </ListItemAvatar>
                  <ListItemText primary={primary} secondary={secondary} />
                  <ListItemAvatar>
                    <Stack>
                      <IconButton>
                        <StarRateIcon />
                      </IconButton>
                    </Stack>
                  </ListItemAvatar>       
              </ListItem>
            ))}
        </List>
      </>
    )
}

export default ListPartner;